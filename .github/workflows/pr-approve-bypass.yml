name: PR approve bypass

on:
  issue_comment:
    types: [created]

jobs:
  bypass-approve:
    if: github.event.issue.pull_request != null && contains(github.event.comment.body, '/bypass-approve')
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write

    steps:
      - name: Check CODEOWNERS and Approve PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.REPO_ACCESS_TOKEN }}
          script: |
            const prNumber = context.issue.number;
            const commenter = context.actor;

            // 변경된 파일 목록 가져오기
            const files = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber,
            });

            // CODEOWNERS 파일 내용 가져오기
            const codeownersFile = await github.rest.repos.getContent({
              owner: context.repo.owner,
              repo: context.repo.repo,
              path: 'CODEOWNERS',
            });
            const codeownersContent = Buffer.from(codeownersFile.data.content, 'base64').toString();

            // 댓글 작성자가 CODEOWNER인 라인들 찾기
            const userOwnedPaths = [];
            const lines = codeownersContent.split('\n');

            for (const line of lines) {
              const trimmed = line.trim();
              if (trimmed && !trimmed.startsWith('#')) {
                const parts = trimmed.split(/\s+/);
                if (parts.length >= 2) {
                  const path = parts[0];
                  const owners = parts.slice(1);
                  
                  // 이 라인에 댓글 작성자가 포함되어 있는지 확인
                  const isOwner = owners.some(owner => {
                    const cleanOwner = owner.replace('@', '');
                    return cleanOwner === commenter;
                  });
                  
                  if (isOwner) {
                    userOwnedPaths.push(path);
                  }
                }
              }
            }

            // 변경된 파일들이 모두 사용자가 소유한 경로에 속하는지 확인
            const changedFiles = files.data.map(file => file.filename);
            const allFilesInUserPaths = changedFiles.every(filePath => {
              return userOwnedPaths.some(path => {
                if (path === '*') return true;
                if (path.endsWith('/')) {
                  // CODEOWNERS 경로가 /로 시작하는 경우와 그렇지 않은 경우 모두 처리
                  const normalizedPath = path.startsWith('/') ? path.substring(1) : path;
                  return filePath.startsWith(normalizedPath);
                }
                return filePath === path;
              });
            });

            const isAuthorized = allFilesInUserPaths;

            if (!isAuthorized) {
              console.log(`댓글 작성자 ${commenter}는 이 PR의 모든 파일에 대한 CODEOWNER가 아닙니다.`);
              console.log(`변경된 파일: ${changedFiles.join(', ')}`);
              console.log(`사용자가 소유한 경로: ${userOwnedPaths.join(', ')}`);
              throw new Error(`${commenter}가 권한이 없는 디렉토리는 작업할 수 없어요. 변경 사항을 확인해주세요.`);
            }

            // 승인 처리
            await github.rest.pulls.createReview({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber,
              event: 'APPROVE',
              body: `✅ Approved by GitHub Actions (CODEOWNER)`,
            });

            console.log(`PR #${prNumber}이 CODEOWNER에 의해 승인되었습니다.`);
